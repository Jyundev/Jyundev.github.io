name: Deploy Jekyll site to Pages

on:
  # master 브랜치로의 푸시 이벤트에 반응
  push:
    branches: ["master"]

  # GitHub Actions 탭에서 수동으로 실행할 수 있는 트리거
  workflow_dispatch:

# GitHub Pages에 배포하기 위한 권한 설정
permissions:
  contents: read
  pages: write
  id-token: write

# 동시성 관리: pages 그룹 내에서 하나의 배포만 실행, 진행 중인 배포는 취소하지 않음
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 빌드 작업
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2' # 사용 가능한 Ruby 버전을 선택합니다
          bundler-cache: true # 'bundle install'을 실행하고 설치된 gem을 자동으로 캐시합니다
          cache-version: 1 # 캐시된 gem을 다시 다운로드해야 할 경우 이 숫자를 증가시킵니다
      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ github.repository }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages # 업로드할 Artifact의 이름을 지정합니다
          path: ./_site

  # 배포 작업
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages # 다운로드할 Artifact의 이름을 지정합니다
          path: ./site
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # GitHub Token을 사용하여 인증합니다
          artifact_name: ./site # 다운로드한 Artifact의 경로를 지정합니다
          cleanup: false # 이 배포에 의해 대체되지 않은 기존 파일은 유지합니다
